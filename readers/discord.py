import os
import json
import datetime as dt

DEFAULT_PATH = "./discord"

def count_messages_json(msgs,
                        chats,
                        sender=None,
                        attachs=True,
                        multattachs=False):
    for message in chats["messages"]:
        if "author" not in message or "name" not in message["author"] or (
                sender is not None
                and message["author"]["name"] not in sender):
            continue

        date = dt.datetime.strptime(
            message["timestamp"][:message["timestamp"].rindex('T') + 8],
            "%Y-%m-%dT%H:%M:%S")

        if "content" in message:
            msgs.append(date)

        if not attachs:
            continue

        nbattachs = len(message["attachments"])
        if multattachs:
            for _ in range(nbattachs):
                msgs.append(date)
        elif nbattachs > 0:
            msgs.append(date)

def count_messages(account,
                   msgs,
                   path=DEFAULT_PATH,
                   sender=None,
                   attachs=True,
                   multattachs=False):
    """Adds the messages to the msgs.

    Arguments:
    account: the name of the json file for which we want to count the messages.
    msgs: the list of dates of messages.
    path: the path to the directory containing the conversations. Defaults to  DEFAULT_PATH.
    sender: either a string corresponding to the name of a sender, a set of senders, or None. If None, all senders are counted.
    attachs: a boolean indicating whether attachments (files, gifs, stickers, images, videos, etc) are counted as messages. Defaults to True.
    multattachs: a boolean indicating whether multiple attachments sent at once are counted several messages.
    Default to False. Doesn't matter if `attachs` is False.
    """

    with open(f"{path}/{account}", encoding='utf8') as reader:
        chats = json.load(reader)

        if isinstance(sender, str):
            sender = {sender}

        count_messages_json(msgs, chats, sender, attachs, multattachs)

def count_all_messages(msgs,
                       sender=None,
                       path=DEFAULT_PATH,
                       attachs=True,
                       multattachs=False):
    for file in os.listdir(path):
        if file.endswith(".json") and os.path.isfile(f"{path}/{file}"):
            with open(f"{path}/{file}", encoding='utf8') as reader:
                chats = json.load(reader)
                count_messages_json(msgs, chats, sender, attachs, multattachs)

# Initiate Discord command line parameters
def init(parser):
    group = parser.add_argument_group("discord", "Discord options")

    # Discord parameters
    group.add_argument(
        '--dcaccount',
        type=str,
        action="store",
        help=
        "the name of the chat we want to count messages from. Has to be specified to count Discord messages"
    )
    group.add_argument(
        '--dcpath',
        type=str,
        action="store",
        default=DEFAULT_PATH,
        help=
        f"the path to the json file generated by Discord. Defaults to \"{DEFAULT_PATH}\""
    )
    group.add_argument(
        '--dcsender',
        type=str,
        action='append',
        default=None,
        help=
        "the list of considered senders. If not specified, all messages are counted. Use once per sender"
    )

def parse(msgs, values):
    if values["all"]:
        if values["dcsender"] is not None:
            count_all_messages(msgs,
                               values["dcsender"],
                               path=values["dcpath"],
                               attachs=not values["no_attachs"],
                               multattachs=values["multi_attachs"])
    elif values["dcaccount"] is not None:
        count_messages(values["dcaccount"],
                       msgs,
                       sender=values["dcsender"],
                       path=values["dcpath"],
                       attachs=not values["no_attachs"],
                       multattachs=values["multi_attachs"])
